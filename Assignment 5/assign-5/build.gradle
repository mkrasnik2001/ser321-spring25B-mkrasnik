/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit
    implementation 'org.json:json:20171018'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.distrib.Client'
}

task runLeader(type: JavaExec) {
    group = 'application'
    mainClass = 'org.distrib.Leader'
    classpath = sourceSets.main.runtimeClasspath
    args = [
        project.findProperty('clientPort') ?: '9000',
        project.findProperty('nodePort')   ?: '8000'
    ]
}

task runNode(type: JavaExec) {
    group = 'application'
    mainClass = 'org.distrib.Node'
    classpath = sourceSets.main.runtimeClasspath
    args = [
        project.findProperty('leaderHost') ?: 'localhost',
        project.findProperty('nodePort')   ?: '8000'
    ]
    if (project.hasProperty('Fault')) {
        systemProperty 'Fault', project.property('Fault')
    }
}

task runClient(type: JavaExec) {
    group = 'application'
    mainClass = 'org.distrib.Client'
    classpath = sourceSets.main.runtimeClasspath
    args = [
        project.findProperty('leaderHost') ?: 'localhost',
        project.findProperty('clientPort') ?: '9000'
    ]
    standardInput = System.in
}